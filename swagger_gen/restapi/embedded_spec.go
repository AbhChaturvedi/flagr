// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Flagr is a feature flagging, A/B testing and dynamic configuration microservice",
    "title": "Flagr",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/evaluation": {
      "post": {
        "tags": [
          "evaluation"
        ],
        "operationId": "postEvaluation",
        "parameters": [
          {
            "description": "evalution context",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/evalContext"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "evaluation result",
            "schema": {
              "$ref": "#/definitions/evalResult"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/flags": {
      "get": {
        "tags": [
          "flags"
        ],
        "operationId": "findFlags",
        "responses": {
          "200": {
            "description": "list all the flags",
            "schema": {
              "$ref": "#/definitions/findFlagsOKBody"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "constraint": {
      "type": "object",
      "required": [
        "property",
        "operator",
        "value"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "operator": {
          "type": "string",
          "minLength": 1
        },
        "property": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "distribution": {
      "type": "object",
      "required": [
        "rank",
        "percent",
        "bitmap",
        "variantID",
        "variantKey"
      ],
      "properties": {
        "bitmap": {
          "type": "string",
          "minLength": 1
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "percent": {
          "type": "integer",
          "format": "int32",
          "maximum": 100,
          "minimum": 0
        },
        "rank": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "variantID": {
          "type": "integer",
          "format": "int64"
        },
        "variantKey": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "evalContext": {
      "type": "object",
      "required": [
        "entityID",
        "entityType"
      ],
      "properties": {
        "enableDebug": {
          "type": "boolean"
        },
        "entityContext": {
          "type": "object"
        },
        "entityID": {
          "type": "string",
          "minLength": 1
        },
        "entityType": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "evalDebugLog": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        },
        "segmentDebugLogs": {
          "$ref": "#/definitions/evalDebugLogSegmentDebugLogs"
        }
      }
    },
    "evalDebugLogSegmentDebugLogs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/segmentDebugLog"
      },
      "x-go-gen-location": "models"
    },
    "evalResult": {
      "type": "object",
      "required": [
        "flagID",
        "segmentID",
        "variantID",
        "evalContext",
        "timestamp"
      ],
      "properties": {
        "evalContext": {
          "$ref": "#/definitions/evalContext"
        },
        "evalDebugLog": {
          "$ref": "#/definitions/evalDebugLog"
        },
        "flagID": {
          "type": "integer",
          "format": "int64"
        },
        "segmentID": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "string",
          "minLength": 1
        },
        "variantID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "findFlagsOKBody": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/flag"
      },
      "x-go-gen-location": "operations"
    },
    "flag": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "minLength": 1
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "segments": {
          "$ref": "#/definitions/flagSegments"
        },
        "variants": {
          "$ref": "#/definitions/flagVariants"
        }
      }
    },
    "flagSegments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/segment"
      },
      "x-go-gen-location": "models"
    },
    "flagVariants": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/variant"
      },
      "x-go-gen-location": "models"
    },
    "segment": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "constraints": {
          "$ref": "#/definitions/segmentConstraints"
        },
        "description": {
          "type": "string",
          "minLength": 1
        },
        "distributions": {
          "$ref": "#/definitions/segmentDistributions"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "segmentConstraints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/constraint"
      },
      "x-go-gen-location": "models"
    },
    "segmentDebugLog": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        },
        "segmentID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "segmentDistributions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/distribution"
      },
      "x-go-gen-location": "models"
    },
    "variant": {
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "minLength": 1
        }
      }
    }
  }
}`))
}
